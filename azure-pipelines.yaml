trigger:
- main

pool:
  name: 'COMP367-Windows'

variables:
  nodeVersion: '18.x'
  authServiceDir: 'auth-service'
  authUiDir: 'auth-ui'
  communityServiceDir: 'community-service'
  communityUiDir: 'community-ui'
  hostDir: 'host'
  testResultsFile: 'junit.xml'
  coverageReportDir: 'coverage'
  coverageReportFile: '$(coverageReportDir)/cobertura-coverage.xml'

stages:
- stage: Build
  displayName: 'Build, Test, Analyze, and Publish Artifacts'
  jobs:
  - job: BuildTestAnalyzePublish
    displayName: 'Build, Test, Analyze & Publish Job'
    steps:
    - checkout: self
      fetchDepth: 0

    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js $(nodeVersion)'

    - script: npm ci
      displayName: 'Install Dependencies for $(authServiceDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(authServiceDir)'

    - script: npm ci
      displayName: 'Install Dependencies for $(communityServiceDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)'

    - script: npm ci
      displayName: 'Install Dependencies for $(authUiDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(authUiDir)'

    - script: npm ci
      displayName: 'Install Dependencies for $(communityUiDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(communityUiDir)'

    - script: npm ci
      displayName: 'Install Dependencies for $(hostDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(hostDir)'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloudServiceConnection'
        organization: 'iarcecas'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'iarcecas_Project4Project'
        cliProjectName: 'Project4Project'
        cliSources: '.'
        extraProperties: |
          sonar.javascript.cobertura.reportPaths=$(System.DefaultWorkingDirectory)/$(authServiceDir)/$(coverageReportFile),$(System.DefaultWorkingDirectory)/$(communityServiceDir)/$(coverageReportFile)
          sonar.javascript.junit.reportPaths=$(System.DefaultWorkingDirectory)/$(authServiceDir)/$(testResultsFile),$(System.DefaultWorkingDirectory)/$(communityServiceDir)/$(testResultsFile)
          sonar.coverage.exclusions=**/node_modules/**,**/__tests__/**,**/*.test.js
      displayName: 'Prepare SonarCloud Analysis'

    - script: node --experimental-vm-modules node_modules/jest/bin/jest.js --ci --reporters=default --reporters=jest-junit --coverage --coverageReporters=cobertura
      displayName: 'Run Tests & Coverage for $(authServiceDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(authServiceDir)'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/$(authServiceDir)/$(testResultsFile)'
        searchFolder: '$(System.DefaultWorkingDirectory)/$(authServiceDir)'
      displayName: 'Publish Test Results for $(authServiceDir)'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(authServiceDir)/$(coverageReportFile)'
        reportDirectory: '$(System.DefaultWorkingDirectory)/$(authServiceDir)/$(coverageReportDir)'
      displayName: 'Publish Code Coverage for $(authServiceDir)'
      condition: succeededOrFailed()

    - script: node --experimental-vm-modules node_modules/jest/bin/jest.js --ci --reporters=default --reporters=jest-junit --coverage --coverageReporters=cobertura
      displayName: 'Run Tests & Coverage for $(communityServiceDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)/$(testResultsFile)'
        searchFolder: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)'
      displayName: 'Publish Test Results for $(communityServiceDir)'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)/$(coverageReportFile)'
        reportDirectory: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)/$(coverageReportDir)'
      displayName: 'Publish Code Coverage for $(communityServiceDir)'
      condition: succeededOrFailed()

    - script: npm run build
      displayName: 'Build $(authUiDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(authUiDir)'

    - script: npm run build
      displayName: 'Build $(communityUiDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(communityUiDir)'

    - script: npm run build
      displayName: 'Build $(hostDir)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(hostDir)'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarCloud Quality Gate Result'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(authServiceDir)'
        ArtifactName: 'auth-service'
        publishLocation: 'Container'
      displayName: 'Publish artifact: auth-service'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(communityServiceDir)'
        ArtifactName: 'community-service'
        publishLocation: 'Container'
      displayName: 'Publish artifact: community-service'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(authUiDir)/dist'
        ArtifactName: 'auth-ui-dist'
        publishLocation: 'Container'
      displayName: 'Publish artifact: auth-ui-dist'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(communityUiDir)/dist'
        ArtifactName: 'community-ui-dist'
        publishLocation: 'Container'
      displayName: 'Publish artifact: community-ui-dist'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/$(hostDir)/dist'
        ArtifactName: 'host-dist'
        publishLocation: 'Container'
      displayName: 'Publish artifact: host-dist'

- stage: Deploy_QAT
  displayName: 'Deploy to QAT Environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployQATJob
    displayName: 'Deploy to QAT'
    steps:
    - script: echo 'Downloading artifacts for QAT...'
      displayName: 'Simulate Artifact Download'

    - script: |
        echo "Simulating deployment of auth-service to QAT..."
        echo "Simulating deployment of community-service to QAT..."
        echo "Simulating deployment of auth-ui-dist to QAT..."
        echo "Simulating deployment of community-ui-dist to QAT..."
        echo "Simulating deployment of host-dist to QAT..."
      displayName: 'Simulate Deployment to QAT'

- stage: Deploy_Staging
  displayName: 'Deploy to Staging Environment'
  dependsOn: Deploy_QAT
  condition: succeeded()
  jobs:
  - job: DeployStagingJob
    displayName: 'Deploy to Staging'
    steps:
    - script: echo 'Downloading artifacts for Staging...'
      displayName: 'Simulate Artifact Download'

    - script: |
        echo "Simulating deployment of auth-service to Staging..."
        echo "Simulating deployment of community-service to Staging..."
        echo "Simulating deployment of auth-ui-dist to Staging..."
        echo "Simulating deployment of community-ui-dist to Staging..."
        echo "Simulating deployment of host-dist to Staging..."
      displayName: 'Simulate Deployment to Staging'

- stage: Deploy_Prod
  displayName: 'Deploy to Production Environment'
  dependsOn: Deploy_Staging
  condition: succeeded()
  jobs:
  - job: DeployProdJob
    displayName: 'Deploy to Production'
    steps:
    - script: echo 'Downloading artifacts for Production...'
      displayName: 'Simulate Artifact Download'

    - script: |
        echo "Simulating deployment of auth-service to Production..."
        echo "Simulating deployment of community-service to Production..."
        echo "Simulating deployment of auth-ui-dist to Production..."
        echo "Simulating deployment of community-ui-dist to Production..."
        echo "Simulating deployment of host-dist to Production..."
      displayName: 'Simulate Deployment to Production'
